// <auto-generated />
using System;
using Core.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210514141724_SeedInitialData")]
    partial class SeedInitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "Homero",
                            Phone = "11111"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "Bart",
                            Phone = "22222"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Name = "Lisa",
                            Phone = "33333"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Name = "Marge",
                            Phone = "44444"
                        },
                        new
                        {
                            Id = 5,
                            Active = false,
                            Name = "Maggie",
                            Phone = "55555"
                        });
                });

            modelBuilder.Entity("Core.Domain.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            EndDate = new DateTime(2021, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 70.0,
                            StartDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            EndDate = new DateTime(2021, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 140.0,
                            StartDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            EndDate = new DateTime(2021, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 70.0,
                            StartDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("Core.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Brand = "Renault",
                            PricePerDay = 10.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Brand = "Audi",
                            PricePerDay = 20.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Brand = "Ford",
                            PricePerDay = 15.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = 4,
                            Active = false,
                            Brand = "Fiat",
                            PricePerDay = 10.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Brand = "BMW",
                            PricePerDay = 25.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = 6,
                            Active = false,
                            Brand = "volkswagen",
                            PricePerDay = 10.0,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("Core.Domain.Rental", b =>
                {
                    b.HasOne("Core.Domain.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Vehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Core.Domain.Client", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Core.Domain.Vehicle", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
